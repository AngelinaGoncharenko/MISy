// <auto-generated />
using System;
using DbClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbClasses.Migrations
{
    [DbContext(typeof(MISDbContext))]
    partial class MISDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbClasses.Models.AccountEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DbClasses.Models.AppointmentEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("doctorid")
                        .HasColumnType("int");

                    b.Property<DateTime>("last")
                        .HasColumnType("datetime2");

                    b.Property<int>("ldentitiesid")
                        .HasColumnType("int");

                    b.Property<DateTime>("next")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("ldentitiesid");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("DbClasses.Models.ConditionsHospEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("DbClasses.Models.DepartmentEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DbClasses.Models.DiagnosisEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("anamnes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receptid")
                        .HasColumnType("int");

                    b.Property<string>("recomendationDiagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("receptid");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("DbClasses.Models.DoctorEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accountid")
                        .HasColumnType("int");

                    b.Property<int>("profid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.HasIndex("profid");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("DbClasses.Models.GenderEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("DbClasses.Models.GovEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Gov");
                });

            modelBuilder.Entity("DbClasses.Models.HospitalizationEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("conditionsid")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateBeginHospitalization")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateEndHospitalization")
                        .HasColumnType("datetime2");

                    b.Property<int>("departmentid")
                        .HasColumnType("int");

                    b.Property<int>("medHistoryid")
                        .HasColumnType("int");

                    b.Property<int>("patientid")
                        .HasColumnType("int");

                    b.Property<int>("solutionid")
                        .HasColumnType("int");

                    b.Property<string>("target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("conditionsid");

                    b.HasIndex("departmentid");

                    b.HasIndex("medHistoryid");

                    b.HasIndex("patientid");

                    b.HasIndex("solutionid");

                    b.ToTable("Hospitalization");
                });

            modelBuilder.Entity("DbClasses.Models.LDEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("doctorid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientid")
                        .HasColumnType("int");

                    b.Property<string>("recomendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("results")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeEventid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.HasIndex("typeEventid");

                    b.ToTable("lDEntities");
                });

            modelBuilder.Entity("DbClasses.Models.MedCardEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentid")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdMC")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoPatients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("appointmentid");

                    b.ToTable("MedCard");
                });

            modelBuilder.Entity("DbClasses.Models.MedHistoryEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("diagnosid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("diagnosid");

                    b.ToTable("MedHistory");
                });

            modelBuilder.Entity("DbClasses.Models.PatientEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateEndPolicy")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genderid")
                        .HasColumnType("int");

                    b.Property<int>("govid")
                        .HasColumnType("int");

                    b.Property<string>("insuranceCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("medCardid")
                        .HasColumnType("int");

                    b.Property<int>("medHistoryid")
                        .HasColumnType("int");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pasport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("policy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("work")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("снилс")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("genderid");

                    b.HasIndex("govid");

                    b.HasIndex("medCardid");

                    b.HasIndex("medHistoryid");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DbClasses.Models.ProfEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Professionaly");
                });

            modelBuilder.Entity("DbClasses.Models.ReceptEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("dosige")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Recept");
                });

            modelBuilder.Entity("DbClasses.Models.SolutionHospEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SolutionHosp");
                });

            modelBuilder.Entity("DbClasses.Models.TypeEventEntities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TypeEvent");
                });

            modelBuilder.Entity("DbClasses.Models.AppointmentEntities", b =>
                {
                    b.HasOne("DbClasses.Models.DoctorEntities", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.LDEntities", "ldentities")
                        .WithMany()
                        .HasForeignKey("ldentitiesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("ldentities");
                });

            modelBuilder.Entity("DbClasses.Models.DiagnosisEntities", b =>
                {
                    b.HasOne("DbClasses.Models.ReceptEntities", "recept")
                        .WithMany()
                        .HasForeignKey("receptid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("recept");
                });

            modelBuilder.Entity("DbClasses.Models.DoctorEntities", b =>
                {
                    b.HasOne("DbClasses.Models.AccountEntities", "account")
                        .WithMany()
                        .HasForeignKey("accountid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.ProfEntities", "prof")
                        .WithMany()
                        .HasForeignKey("profid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("prof");
                });

            modelBuilder.Entity("DbClasses.Models.HospitalizationEntities", b =>
                {
                    b.HasOne("DbClasses.Models.ConditionsHospEntities", "conditions")
                        .WithMany()
                        .HasForeignKey("conditionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.DepartmentEntities", "department")
                        .WithMany()
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.MedHistoryEntities", "medHistory")
                        .WithMany()
                        .HasForeignKey("medHistoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.PatientEntities", "patient")
                        .WithMany()
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.SolutionHospEntities", "solution")
                        .WithMany()
                        .HasForeignKey("solutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conditions");

                    b.Navigation("department");

                    b.Navigation("medHistory");

                    b.Navigation("patient");

                    b.Navigation("solution");
                });

            modelBuilder.Entity("DbClasses.Models.LDEntities", b =>
                {
                    b.HasOne("DbClasses.Models.DoctorEntities", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.PatientEntities", "patient")
                        .WithMany()
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.TypeEventEntities", "typeEvent")
                        .WithMany()
                        .HasForeignKey("typeEventid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");

                    b.Navigation("typeEvent");
                });

            modelBuilder.Entity("DbClasses.Models.MedCardEntities", b =>
                {
                    b.HasOne("DbClasses.Models.AppointmentEntities", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");
                });

            modelBuilder.Entity("DbClasses.Models.MedHistoryEntities", b =>
                {
                    b.HasOne("DbClasses.Models.DiagnosisEntities", "diagnos")
                        .WithMany()
                        .HasForeignKey("diagnosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("diagnos");
                });

            modelBuilder.Entity("DbClasses.Models.PatientEntities", b =>
                {
                    b.HasOne("DbClasses.Models.GenderEntities", "gender")
                        .WithMany()
                        .HasForeignKey("genderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.GovEntities", "gov")
                        .WithMany()
                        .HasForeignKey("govid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.MedCardEntities", "medCard")
                        .WithMany()
                        .HasForeignKey("medCardid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbClasses.Models.MedHistoryEntities", "medHistory")
                        .WithMany()
                        .HasForeignKey("medHistoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gender");

                    b.Navigation("gov");

                    b.Navigation("medCard");

                    b.Navigation("medHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
